#!/usr/bin/env php
<?php
define('DS',            '/');
define('APP_NAME',      'application');
define('ROOT_PATH',     '/Users/kule/web/yaf-app');
define('INI_PATH',      ROOT_PATH.DS.'conf'.DS.'app.ini');

define('ASSETS_URL',    'ASSETS_URL');
define('BACKEND_URL',   'BACKEND_URL');

use Yaf\Loader as InternalLoader;
use Resque\Resque;
use Resque\Resque\Worker;
use Resque\Resque\Log;
use Resque\Resque\Redis;
use Psr\Log\LogLevel;

$loader = InternalLoader::getInstance(ROOT_PATH . DS . APP_NAME . DS . 'library');
spl_autoload_register(array($loader, 'autoload'));

$action = $_SERVER['argv'][1];
$parameters = array_slice($_SERVER['argv'], 2);
$params = array();
foreach ($parameters as $parameter) {
    $param = explode('=', $parameter);
    foreach ($param as $one) {
        $params[] = $one;
    }
}

$num_params = count($params);
if ($num_params % 2 != 0) {
    $result = "Setup Wrong Parameter, Please Check!";
    echo $result, "\n";
    return;
}

$run_params = array();
for ($i = 0; $i < $num_params; $i+=2) {
    $param = substr($params[$i], 2);
    $run_params[$param] = $params[$i + 1];
}

$run_params['host']      = isset($run_params['host']) ? $run_params['host'] : '127.0.0.1';
$run_params['port']      = isset($run_params['port']) ? (int)$run_params['port'] : '6379';
$run_params['database']  = isset($run_params['database']) ? (int)$run_params['database'] : 0;
$run_params['log_level'] = isset($run_params['log-level']) ? (boolean)$run_params['log-level'] : false;
$run_params['blocking']  = isset($run_params['blocking']) ? (boolean) $run_params['blocking'] : false;
$run_params['interval']  = isset($run_params['interval']) ? (int) $run_params['interval'] : 1;
$run_params['process']   = isset($run_params['process']) ? (int) $run_params['process'] : 1;
$run_params['pid_path']  = isset($run_params['pid-path']) ? $run_params['pid-path'] : '/tmp/resque/';
extract($run_params);

if ($action == 'start') {
    start();
} else if ($action == 'stop') {
    stop();
}

function start()
{
    global $host, $port, $database, $log_level, $process, $logger, $queue, $pid_path, $interval, $blocking;

    Resque::setBackend($host . ':' . $port, $database);
    $logger = new Log($log_level);
    if (isset($prefix)) {
        $logger->log(LogLevel::INFO, 'Prefix Set To {prefix}', array('prefix' => $prefix));
        Redis::prefix($prefix);
    }

    if (empty($queue)) {
        $logger->log(LogLevel::EMERGENCY, 'Queue Name Not Set');
        $result = 'Running Error!';
        echo $result, "\n";
        return;
    }

    for ($i = 0; $i < $process; ++$i) {
        $pid = Resque::fork();
        if ($pid < 0) {
            $logger->log(LogLevel::EMERGENCY, 'Could Not fork Worker {process}', array('process' => $i));
            $result = 'Running Error!';
            echo $result, "\n";
            return;
        }  else if ($pid == 0) {
            $sid = posix_setsid();
            $queues = explode(',', $queue);
            if ($sid < 0) {
                $logger->log(LogLevel::EMERGENCY, 'Could Not Make The Current Process A Session Leader');
                $result = 'Running Error!';
                echo $result, "\n";
                return;
            }

            if (is_dir($pid_path)) {
                foreach ($queues as $queue) {
                    $pidfile = rtrim($pid_path, DS).DS.$queue."." . posix_getpid();
                    if (!file_put_contents($pidfile, posix_getpid())) {
                        $logger->log(LogLevel::EMERGENCY, 'Could Not Create Pid File, Permission Denied');
                        $result = 'Running Error!';
                        echo $result, "\n";
                        return;
                    }
                }
            } else {
                $logger->log(LogLevel::EMERGENCY, 'Could Not Create Pid File, {pidpath} Directory Not Exists', array('pidpath' => $pid_path));
                $result = 'Running Error!';
                echo $result, "\n";
                return;
            }

            $worker = new Worker($queues);
            $worker->setLogger($logger);
            $logger->log(LogLevel::NOTICE, 'Starting Worker {worker}', array('worker' => $worker));
            $worker->work($interval, $blocking);
            break;
        }
    }
    if (isset($pid) && $pid > 0) {
        exit(0);
    }
}


function stop()
{
    global $queue, $pid_path;
    $queues = explode(',', $queue);
    foreach ($queues as $queue) {
        $pid_files = glob(rtrim($pid_path, DS).DS.$queue."*");
        foreach($pid_files as $pid_file) {
            $pid = file_get_contents($pid_file);
            posix_kill($pid, SIGTERM);
            unlink($pid_file);
        }
    }
}
?>